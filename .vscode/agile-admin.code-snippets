{
	// 导入模块
	"Import": {
		"prefix": ["aaimport", "aai", "aimport", "ai"],
		"body": [
			"import { ${1:name} } from '${2:module}'"
		]
	},
	"Import API": {
		"prefix": ["aaimportapi", "aaia", "aimportapi", "aia"],
		"body": [
			"import { ${1:api} } from '@/apis'"
		]
	},
	"Import Component": {
		"prefix": ["aaimportcomponent", "aaic", "aimportcomponent", "aic"],
		"body": [
			"import { ${1:component} } from '@/components'"
		]
	},
	"Import Store" :{
		"prefix": ["aaimportstore", "aaistore", "aimportstore", "ais"],
		"body": [
			"import { ${1:store} } from '@/stores'"
		]
	},
	"Import Hook": {
		"prefix": ["aaimporthook", "aaih", "aimporthook", "aih"],
		"body": [
			"import { ${1:hook} } from '@/hooks'"
		]
	},
	"Import Util": {
		"prefix": ["aaimportutil", "aaiu", "aimportutil", "aiu"],
		"body": [
			"import { ${1:util} } from '@/common/utils'"
		]
	},
	"Import Enum": {
		"prefix": ["aaimportenum", "aaie", "aimportenum", "aie"],
		"body": [
			"import { ${1:enum} } from '@/common/enums'"
		]
	},
	"Import Permission": {
		"prefix": ["aaimportpermission", "aaip", "aimportpermission", "aip"],
		"body": [
			"import { ${1:permission} } from '@/permission'"
		]
	},
	"Auto Import Function": {
		"prefix": ["aaautoimportfunction", "aaaif", "aautoimportfunction", "aaif"],
		"body": [
			"export const list = []",
			"const moduleFiles = import.meta.glob('./**/${1:index.js}', { eager: true})",
			"for (const key in moduleFiles) {",
			"  const data = moduleFiles[key].default",
			"  list.push(data)",
			"}",
		]
	},
	// 请求接口函数
	"Api Function": {
		"prefix": ["aaapi", "aaa", "aapi", "aa"],
		"body": [
			"export const ${1:api} = params => do${2:method}('${3:url}', params)",
		]
	},
	"Api Get Function": {
		"prefix": ["aaapiget", "aaag", "aapiget", "aag"],
		"body": [
			"export const ${1:api} = params => doGet('${2:url}', params)",
		]
	},
	"Api Json Function": {
		"prefix": ["aaapijson", "aaaj", "aapijson", "aaj"],
		"body": [
			"export const ${1:api} = params => doJson('${2:url}', params)",
		]
	},
	"Api Form Function": {
		"prefix": ["aaapiform", "aaaf", "aapiform", "aaf"],
		"body": [
			"export const ${1:api} = params => doForm('${2:url}', params)",
		]
	},
	"Api Get Binary Function": {
		"prefix": ["aaapigetbinary", "aaagb", "aapigetbinary", "aagb"],
		"body": [
			"export const ${1:api} = params => doGetBinary('${2:url}', params)",
		]
	},
	"Api Json Binary Function": {
		"prefix": ["aaapijsonbinary", "aaajb", "aapijsonbinary", "aajb"],
		"body": [
			"export const ${1:api} = params => doJsonBinary('${2:url}', params)",
		]
	},
	"Api Get Blob Function": {
		"prefix": ["aaapigetblob", "aaagb", "aapigetblob", "aagb"],
		"body": [
			"export const ${1:api} = params => doGetBlob('${2:url}', params)",
		]
	},
	"Api Json Blob Function": {
		"prefix": ["aaapijsonblob", "aaajb", "aapijsonblob", "aajb"],
		"body": [
			"export const ${1:api} = params => doJsonBlob('${2:url}', params)",
		]
	},
	"Api Default Template": {
		"prefix": ["aaapidefaulttemplate", "aaadt", "aapidefaulttemplate", "aadt"],
		"body": [
			"import { doGet, doJson, doGetBlob } from '@/common/utils'\n",
			"/**",
			" * ${1:label}分页列表",
			" * @param {*} params",
			" * @returns",
			" */",
			"export const ${2:name}PageApi = params => doGet('/admin/${2:name}/page', params)\n",
			"/**",
			" * ${1:label}详情",
			" * @param {*} params",
			" * @returns",
			"*/",
			"export const ${2:name}InfoApi = params => doGet('/admin/${2:name}/info', params)\n",
			"/**",
			" * ${1:label}新增",
			" * @param {*} params",
			" * @returns",
			"*/",
			"export const ${2:name}CreateApi = params => doJson('/admin/${2:name}/create', params)\n",
			"/**",
			" * ${1:label}修改",
			" * @param {*} params",
			" * @returns",
			"*/",
			"export const ${2:name}UpdateApi = params => doJson('/admin/${2:name}/update', params)\n",
			"/**",
			" * ${1:label}删除",
			" * @param {*} params",
			" * @returns",
			"*/",
			"export const ${2:name}DeleteApi = params => doJson('/admin/${2:name}/delete', params)\n",
			"/**",
			" * ${1:label}状态设置",
			" * @param {*} params",
			" * @returns",
			"*/",
			"export const ${2:name}SetStatusApi = params => doJson('/admin/${2:name}/status', params)\n",
			"/**",
			" * ${1:label}导出",
			" * @param {*} params",
			" * @returns",
			"*/",
			"export const ${2:name}ExportApi = params => doGetBlob('/admin/${2:name}/export', params)\n",
			"/**",
			" * ${1:label}选择列表",
			" * @param {*} params",
			" * @returns",
			"*/",
			"export const ${2:name}SelectListApi = params => doGet('/admin/${2:name}/select', params)\n",
		]
	},
	// 权限菜单对象
	"Permission Object" : {
		"prefix": ["aapermission", "aap", "apermission", "ap"],
		"body": [
			"{",
			"  label: '${1:label}',",
			"  value: '${2:value}',",
			"  icon: '${3:icon}',",
			"  permission: '${4:permission}',",
			"  keepalive: ${5:false},",
			"  tab: ${6:true},",
			"  multiple: ${7:false},",
			"  show: ${8:true},",
			"  type: PERMISSION_TYPE_ENUM.${9:permissionType},",
			"  route: {",
			"    path: '${10:path}',",
			"    name: '${11:name}',",
			"    component: '${12:component}'",
			"  },",
			"  children: '${12:[]}'",
			"}"
		]
	},
	"Permission Catalog" : {
		"prefix": ["aapermissioncatalog", "aapc", "apermissioncatalog", "apc"],
		"body": [
			"{",
			"  label: '${1:label}',",
			"  value: '${2:value}',",
			"  icon: '${3:icon}',",
			"  permission: '${4:permission}',",
			"  show: ${8:true},",
			"  type: PERMISSION_TYPE_ENUM.CATALOG,",
			"  children: '${9:[]}'",
			"}"
		]
	},
	"Permission Menu" : {
		"prefix": ["aapermissionmenu", "aapm", "apermissionmenu", "apm"],
		"body": [
			"{",
			"  label: '${1:label}',",
			"  value: '${2:value}',",
			"  icon: '${3:icon}',",
			"  permission: '${4:permission}',",
			"  keepalive: ${5:false},",
			"  tab: ${6:true},",
			"  multiple: ${7:false},",
			"  show: ${8:true},",
			"  type: PERMISSION_TYPE_ENUM.MENU,",
			"  route: {",
			"    path: '${9:path}',",
			"    name: '${10:name}',",
			"    component: '${11:component}'",
			"  },",
			"  children: '${12:[]}'",
			"}"
		]
	},
	"Permission Button" : {
		"prefix": ["aapermissionbutton", "aapb", "apermissionbutton", "apb"],
		"body": [
			"{ label: '${1:label}', value: '${2:value}', permission: '${3:permission}', type: PERMISSION_TYPE_ENUM.BUTTON, }",
		]
	},
	// Vue模板
	"Vue Default Template": {
		"prefix": ["aavuedefaulttemplate", "aavdt", "avuedefaulttemplatee", "avdt"],
		"body": [
			"<template>",
			"  <Container :class=\"n.b()\">",
			"    <template #sidebar>",
			"      <div>sidebar</div>",
			"    </template>",
			"    <template #headbar>",
			"      <div>headbar</div>",
			"    </template>",
			"    <div>content</div>",
			"    <template #footbar>",
			"      <div>footbar</div>",
			"    </template>",
			"  </Container>",
			"</template>\n",
			"<script setup>",
			"import { Container } from '@/components'",
			"import { useNamespace } from '@/hooks'\n",
			"const n = useNamespace('${1:namespace}')",
			"</script>\n",
			"<style lang=\"scss\" scoped>",
			"@use '@/assets/sass/bem.scss' as *;",
      "\\$prefix: ${1:namespace}#{\\$element-separator};",
			"@include b(${1:namespace}) {}",
			"</style>\n"
		]
	},
	// Vue Bem 默认模板
	"Vue BEM Default Template": {
		"prefix": ["aavuebemdefaulttemplate", "aavbdt", "avuebemdefaulttemplatee", "avbdt"],
		"body": [
			"<template>",
			"  <div :class=\"n.b()\"></div>",
			"</template>\n",
			"<script setup>",
			"import { useNamespace } from '@/hooks'\n",
			"const n = useNamespace('${1:namespace}')",
			"</script>\n",
			"<style lang=\"scss\" scoped>",
			"@use '@/assets/sass/bem.scss' as *;",
      "\\$prefix: ${1:namespace}#{\\$element-separator};",
			"@include b(${1:namespace}) {}",
			"</style>\n",
		]
	},
	// Vue 新增编辑弹窗模板
	"Vue ADD Edit Template": {
		"prefix": ["aavueaddedittemplate", "aavaet", "avueaddedittemplate", "avaet"],
		"body": [
			"<template>",
      "  <el-dialog",
			"    v-model=\"visible\"",
      "    :title=\"form.id ? '编辑${1:name}' : '新增${1:name}'\"",
      "    :close-on-click-modal=\"false\"",
      "    width=\"500px\"",
      "    draggable",
      "    append-to-body",
      "    destroy-on-close",
      "    @closed=\"onClosed\">",
      "    <el-form ref=\"formRef\" v-loading=\"loading\" :model=\"form\" :rules=\"rules\" @keyup.enter=\"submit()\" label-position=\"top\">",
      "      <el-form-item label=\"名称\" prop=\"name\">",
      "        <el-input v-model=\"form.name\" placeholder=\"名称\" maxlength=\"32\" show-word-limit />",
      "      </el-form-item>",
      "      <el-form-item label=\"状态\" prop=\"status\">",
      "        <Dict v-model=\"form.status\" :code=\"DICT_CODE_ENUM.STATUS\" default-value></Dict>",
      "      </el-form-item>",
      "    </el-form>",
      "    <template #footer>",
      "      <el-button :loading=\"loading\" @click=\"onCancel\">取消</el-button>",
      "      <el-button v-repeat :loading=\"loading\" type=\"primary\" @click=\"onConfirm\">确认</el-button>",
      "    </template>",
      "  </el-dialog>",
      "</template>\n",
			"<script setup>",
			"import { Dict } from '@/components'",
			"import { DICT_CODE_ENUM } from '@/common/enums'",
			"import { ${2:module}InfoApi, ${2:module}CreateApi, ${2:module}UpdateApi } from '@/apis'",
			"import { useNamespace } from '@/hooks'\n",
			"const n = useNamespace('add-edit')\n",
			"const emits = defineEmits(['confirm', 'cancel'])\n",
			"const visible = ref(false)",
			"const loading = ref(false)",
			"const formRef = useTemplateRef('formRef')",
			"const form = reactive({",
			"  id: null,",
			"  name: '',",
			"  status: ''",
			"})",
			"const rules = computed(() => {",
			"  return {",
			"    name: [{ required: true, message: '请输入名称', trigger: 'blur' }],",
			"    status: [{ required: true, message: '请选择状态', trigger: 'change' }]",
			"  }",
			"})\n",
			"const onClosed = () => {",
			"  form.id = null",
			"  formRef.value.resetFields()",
			"}\n",
			"const onCancel = () => {",
			"  visible.value = false",
			"  emits('cancel')",
			"}\n",
			"const onConfirm = () => {",
			"  formRef.value.validate(async valid => {",
			"    if (valid) {",
			"      loading.value = true",
			"      const r = await form.id ? ${2:module}UpdateApi(form) : ${2:module}CreateApi(form)",
			"      if (r) {",
			"        visible.value = false",
			"        ElMessage.success('操作成功!')",
			"        emits('confirm')",
			"      }",
			"    }",
			"  })",
			"}\n",
			"const open = (id) => {",
			"  visible.value = true",
			"  if (id) {",
			"    form.id = id",
			"    loading.value = true",
			"    ${2:module}InfoApi({ id }).then(r => {",
			"      if (r) {",
			"        form.name = r.data.name",
			"        form.status = r.data.status",
			"      }",
			"      nextTick(() => loading.value = false)",
			"    })",
			"  }",
			"}\n",
			"defineExpose({ open })",
			"</script>\n",
			"<style lang=\"scss\" scoped>",
			"@use '@/assets/sass/bem.scss' as *;",
      "\\$prefix: add-edit#{\\$element-separator};",
			"@include b(add-edit) {}",
			"</style>\n",
		]
	},
	// Vue 分页列表页面模板
	"Vue Page List Template": {
		"prefix": ["aavuepagelisttemplate", "aavplt", "avuepagelisttemplate", "avplt"],
		"body": [
			"<template>",
			"  <Container :class=\"n.b()\">",
      "    <template #headbar>",
      "      <el-form inline @keyup.enter=\"onEnterKeyup\">",
      "        <el-form-item>",
      "          <el-input v-model=\"form.name\" placeholder=\"名称\" clearable />",
      "        </el-form-item>",
			"        <el-form-item>",
      "          <Dict class=\"w-177_i\" v-model=\"form.status\" :code=\"DICT_CODE_ENUM.STATUS\" :type=\"DICT_COMPONENT_TYPE_ENUM.SELECT\" placeholder=\"状态\" clearable />",
      "        </el-form-item>",
      "        <el-form-item>",
      "          <DateRangePicker v-model:start=\"form.start\" v-model:end=\"form.end\" />",
      "        </el-form-item>",
      "        <el-form-item>",
      "          <el-button v-repeat @click=\"onSearch\">查询</el-button>",
      "          <el-button v-repeat @click=\"onReset\">重置</el-button>",
      "          <el-button v-permission=\"'${1:module}:create'\" type=\"primary\" @click=\"onAddOrEdit()\">新增</el-button>",
      "          <el-button v-permission=\"'${1:module}:delete'\" type=\"danger\" :disabled=\"!selection.length\" @click=\"onDelete()\">批量删除</el-button>",
      "          <el-button v-permission=\"'${1:module}:export'\" v-repeat @click=\"onExport\">导出</el-button>",
      "        </el-form-item>",
      "      </el-form>",
      "    </template>",
      "    <el-table v-loading=\"loading\" :data=\"list\" border @selection-change=\"onSelectionChange\">",
      "      <el-table-column align=\"center\" type=\"selection\" width=\"50\" />",
      "      <el-table-column align=\"center\" label=\"ID\" prop=\"id\" width=\"80\" />",
      "      <el-table-column align=\"center\" label=\"名称\" prop=\"name\" />",
      "      <el-table-column align=\"center\" label=\"状态\" prop=\"status\" width=\"80\">",
      "        <template v-slot=\"{row}\">",
      "          <el-switch",
      "            v-permission=\"'${1:module}:status'\"",
      "            :before-change=\"onStatusBeforeChange.bind(this, row)\"",
      "            @change=\"onStatusChange(row)\"",
      "            v-model=\"row.status\"",
      "            :active-value=\"STATUS_ENUM.ENABLE\"",
      "            :inactive-value=\"STATUS_ENUM.DISABLE\" />",
      "        </template>",
      "      </el-table-column>",
      "      <el-table-column align=\"center\" label=\"创建时间\" prop=\"createdAt\" width=\"170\" />",
      "      <el-table-column align=\"center\" label=\"更新时间\" prop=\"updatedAt\" width=\"170\" />",
      "      <el-table-column v-permission=\"'${1:module}:update|${1:module}:delete'\" align=\"center\" label=\"操作\" width=\"110\" fixed=\"right\">",
      "        <template v-slot=\"{ row }\">",
      "          <div class=\"f_jc-center\">",
      "            <el-button v-permission=\"'${1:module}:update'\" type=\"primary\" link @click=\"onAddOrEdit(row.id)\">编辑</el-button>",
      "            <el-button v-permission=\"'${1:module}:delete'\" type=\"danger\" link @click=\"onDelete(row.id)\">删除</el-button>",
      "          </div>",
      "        </template>",
      "      </el-table-column>",
      "    </el-table>",
      "    <template #footbar>",
      "      <Pagination v-model:current=\"page.current\" v-model:size=\"page.size\" :total=\"page.total\" :disabled=\"loading\" @change=\"onPaginationChange\" />",
      "    </template>",
      "    <AddEdit ref=\"addEditRef\" @confirm=\"getData\" />",
      "  </Container>",
      "</template>\n",
      "<script setup>",
      "import { Container, Dict, DateRangePicker, Pagination } from '@/components'",
      "import AddEdit  from './components/add-edit/index.vue'",
      "import { useNamespace } from '@/hooks'",
      "import { STATUS_ENUM, DICT_CODE_ENUM, DICT_COMPONENT_TYPE_ENUM } from '@/common/enums'",
      "import { clearJson, download } from '@/common/utils'",
      "import { ${1:module}PageApi, ${1:module}DeleteApi, ${1:module}SetStatusApi, ${1:module}ExportApi} from '@/apis'\n",
      "const n = useNamespace('${1:module}')\n",
      "const addEditRef = useTemplateRef('addEditRef')\n",
      "const loading = ref(false)",
      "const form = reactive({",
      "  name: '',",
      "  status: '',",
      "  start: '',",
      "  end: ''",
      "})",
      "const page = reactive({",
      "  current: 1,",
      "  size: 10,",
      "  total: 0",
      "})",
      "const list = ref([])",
      "const selection = ref([])\n",
      "const getData = () => {",
      "  loading.value = true",
      "  const { current, size } = page",
      "  const params = { ...form, current, size }",
      "  ${1:module}PageApi(params).then(r => {",
      "    if (r) {",
      "      list.value = r.data.list",
      "      page.total = r.data.total",
      "    }",
      "    nextTick(() => loading.value = false)",
      "  })",
      "}\n",
      "const handleReacquire = () => {",
      "  page.current = 1",
      "  getData()",
      "}\n",
      "const onSearch = () => {",
      "  handleReacquire()",
      "}\n",
      "const onReset = () => {",
      "  clearJson(form)",
      "  handleReacquire()",
      "}\n",
      "const onEnterKeyup = () => {",
      "  handleReacquire()",
      "}\n",
      "const onPaginationChange = () => {",
      "  getData()",
      "}\n",
      "const onSelectionChange = value => {",
      "  selection.value = value",
      "}\n",
      "const onDelete = (id) => {",
      "  const ids = id ? [id] : selection.value.map(item => item.id)",
      "  ElMessageBox.confirm(",
      "    `确定对[id=${ ids.join(',') }]进行[${ id ? '删除' : '批量删除' }]操作?`,",
      "    { title: '提示', confirmButtonText: '确认', type: 'warning' }",
      "  ).then(() => {",
      "    ${1:module}DeleteApi({ keys: ids }).then(r => {",
      "      if (r) {",
      "        ElMessage.success('操作成功!')",
      "        getData()",
      "      }",
      "    })",
      "  }).catch(() => {})",
      "}\n",
      "const onStatusBeforeChange = (row) => {",
      "  return new Promise((resolve) => {",
      "    ElMessageBox.confirm(",
      "      `确定对[id=${ row.id }]进行[${ row.status === STATUS_ENUM.ENABLE ? '禁用' : '启用' }]操作?`,",
      "      { title: '提示', confirmButtonText: '确认', type: 'warning' }",
      "    ).then(() => {",
      "      resolve(true)",
      "    }).catch(() => {",
      "      resolve(false)",
      "    })",
      "  })",
      "}\n",
      "const onStatusChange = (row) => {",
      "  const params = {",
      "    key: row.id,",
      "    value: row.status",
      "  }",
      "  ${1:module}SetStatusApi(params).then(r => {",
      "    if (r) {",
      "      ElMessage.success('操作成功!')",
      "    } else {",
      "      row.status = row.status === STATUS_ENUM.DISABLE ? STATUS_ENUM.ENABLE : STATUS_ENUM.DISABLE",
      "    }",
      "  })",
      "}\n",
      "const onExport = () => {",
      "  ${1:module}ExportApi({ ...form }).then(r => r && download(r.data, '', 'xlsx', r.type))",
      "}\n",
      "const onAddOrEdit = (id) => {",
      "  addEditRef.value.open(id)",
      "}\n",
      "onBeforeMount(getData)",
      "</script>\n",
      "<style lang=\"scss\" scoped>",
      "@use '@/assets/sass/bem.scss' as *;",
			"\\$prefix: ${1:module}#{\\$element-separator};",
      "@include b(${1:module}) {}",
      "</style>\n",
		]
	},
	// Vue 弹窗模板
	"Vue Dialog Default Template": {
		"prefix": ["aavuedialogdefaulttemplate", "aavddt", "avuedialogdefaulttemplate", "avddt"],
		"body": [
			"<template>",
			"  <el-dialog",
			"    v-model=\"visible\"",
			"    title=\"${1:title}\"",
			"    :close-on-click-modal=\"false\"",
			"    width=\"600px\"",
			"    draggable",
			"    append-to-body",
			"    destroy-on-close",
			"    @closed=\"onClosed\">",
			"    <template #footer>",
			"      <el-button :loading=\"loading\" @click=\"onCancel\">取消</el-button>",
			"      <el-button v-repeat :loading=\"loading\" type=\"primary\" @click=\"onConfirm\">确认</el-button>",
			"    </template>",
			"  </el-dialog>",
			"</template>\n",
			"<script setup>",
			"import { useNamespace } from '@/hooks'\n",
			"const n = useNamespace('${2:module}')\n",
			"const emits = defineEmits(['confirm', 'cancel'])\n",
			"const visible = ref(false)",
			"const loading = ref(false)\n",
			"const onClosed = () => {",
			"}\n",
			"const onCancel = () => {",
			"  visible.value = false",
			"  emits('cancel')",
			"}\n",
			"const onConfirm = () => {",
			"  visible.value = false",
			"  emits('confirm')",
			"}\n",
			"const open = () => {",
			"  visible.value = true",
			"  loading.value = true",
			"  nextTick(() => loading.value = false)",
			"}\n",
			"defineExpose({ open })",
			"</script>",
			"<style lang=\"scss\" scoped>",
			"@use '@/assets/sass/bem.scss' as *;",
			"\\$prefix: ${2:module}#{\\$element-separator};",
			"@include b(${2:module}) {}",
			"</style>",
		]
	}
}
